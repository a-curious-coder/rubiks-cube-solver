import peasy.*;

PeasyCam cam;
PGraphics pg;
int displayWidth = 600, displayHeight = 600;
int dim = 3;
int numberOfMoves;
float speed = 1.0;
Cubie[] cube = new Cubie[dim*dim*dim];
Move[] allMoves = new Move[] {
  new Move(0, 1, 0, 1), 
  new Move(0, 1, 0, -1), 
  new Move(0, -1, 0, 1), 
  new Move(0, -1, 0, -1), 
  new Move(1, 0, 0, 1), 
  new Move(1, 0, 0, -1), 
  new Move(-1, 0, 0, 1), 
  new Move(-1, 0, 0, -1), 
  new Move(0, 0, 1, 1), 
  new Move(0, 0, 1, -1), 
  new Move(0, 0, -1, 1), 
  new Move(0, 0, -1, -1) 
};

ArrayList<Move> sequence = new ArrayList<Move>();
int counter = 0;

Move currentMove;
Button scrambleButton;

void setup() {
  size(displayWidth, displayHeight, P3D);
  smooth(8);
  cam = new PeasyCam(this, 400);
  cam.setMinimumDistance(200);
  cam.setMaximumDistance(1000);

  int index = 0;
  for (int x = -1; x <= 1; x++) {
    for (int y = -1; y <= 1; y++) {
      for (int z = -1; z <= 1; z++) {
        PMatrix3D matrix = new PMatrix3D();
        matrix.translate(x, y, z);
        cube[index] = new Cubie(matrix, x, y, z);
        index++;
      }
    }
  }
  // automatically scrambles cube upon setup
  //scrambleCube();
  scrambleButton = new Button(displayWidth/10, displayHeight/10, 100, 50, "Scramble cube", 0, 200, 200);
}

// Scrambles the cube.
void scrambleCube() {
  this.numberOfMoves = int(random(20, 50));   
  for (int i = 1; i < numberOfMoves + 1; i++) {
    int r = int(random(allMoves.length));  
    Move m = allMoves[r];
    sequence.add(m);
  }
  currentMove = sequence.get(counter);

  //for (int i = sequence.size()-1; i >= 0; i--) {
  //  Move nextMove = sequence.get(i).copy();
  //  nextMove.reverse();
  //  sequence.add(nextMove);
  //}

  currentMove.start();
}


// Draws objects to screen
void draw() {
  background(51); 

  cam.beginHUD();
  fill(255);
  textSize(32);
  text(counter, 100, 100);
  cam.endHUD();

  rotateX(-0.5);
  rotateY(0.4);
  rotateZ(0.1);



  currentMove.update();
  if (currentMove.finished()) {
    if (counter < sequence.size()-1) {
      counter++;
      currentMove = sequence.get(counter);
      currentMove.start();
    }
  }


  scale(50);
  for (int i = 0; i < cube.length; i++) {
    push();
    if (abs(cube[i].z) > 0 && cube[i].z == currentMove.z) {
      rotateZ(currentMove.angle);
    } else if (abs(cube[i].x) > 0 && cube[i].x == currentMove.x) {
      rotateX(currentMove.angle);
    } else if (abs(cube[i].y) > 0 && cube[i].y ==currentMove.y) {
      rotateY(-currentMove.angle);
    }   
    cube[i].show();
    pop();
  }
}
